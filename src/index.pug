extends _layouts/base

block includes
  include /_modules/pageContainer/pageContainer
  include /_modules/demo/demo
  include /_modules/bodyContent/bodyContent
  include /_modules/header/header

block content
  +pageContainer()
    +header()
    :markdown
      This documentation is best viewed on a Desktop computer or laptop for the sake of viewing the examples at all screen sizes.

      This documentation also assumes that you have the ability to use ES6 JavaScript syntax in your project. Try looking into [Yeogurt](https://github.com/larsonjj/generator-yeogurt) or [Babel](https://babeljs.io/) if you aren't already using ES6 syntax in your JavaScript.

      mq-js was inspired by the [mq-scss](https://www.npmjs.com/package/mq-js) Sass mixin. I wanted to use media queries in javascript in a similar sort of way to how I was using media queries in Sass.

      If you haven't looked into [mq-scss](https://www.npmjs.com/package/mq-js) I highly recommend checking it out. It makes writing media queries far easier than any other method.

    +bodyContent()
      :markdown
        ## Setup

        Firstly, use `npm install mq-js --save` to add the npm module to your project. If you haven't used npm before, read through [this documentation](https://docs.npmjs.com/getting-started/installing-node) to get set up.

        Now, create this simple `mq.js` file to set up your websites breakpoints.

    +demo({
      js: `
//mq.js file
"use strict";

import MQ from "mq-js";

//Define your Site break points here
const mq = new MQ({
  small: 600,
  medium: 980,
  large: 1200
});

export default mq;`,
    })

    p(style="text-align: center; font-size: 2em")
      strong OR

    :markdown
      Alternatively you can save the breakpoints into a JSON file, then import them.

    +demo({
      json: `
{
  "//" : "This is the breakpoints.json file",
  "small": 600,
  "medium": 980,
  "large": 1200
}`,
      js: `
//mq.js file
"use strict";
import MQ from "mq-js";
import breakpoints from './breakpoints.json';

const mq = new MQ(breakpoints);

export default mq;`,
    })

    :markdown
      The above breakpoints are what I will be using throughout the examples in this documentation.

    :markdown
      ## Basic usage

      Now that you have your break points set up, you can use them when calling the function.

    :markdown
      ### mq.min

      In the following example, the button wil only turn green when you click it if the browser window is a minimum of 980px wide (ie. above the "medium" breakpoint).

      The border will turn green when it is clickable

    +demo({
      html: `
include /_modules/btn/btn
.example
  +btn({classes:'-one'})
    | Clickable above 980px screen width`,
      js: `
//module js file
"use strict";
import $ from 'jquery';

//import the mq variable that was created in the setup stage
import mq from "./mq";

$('.btn.-one').click(function(e){
  e.preventDefault();
  mq.min('medium', (screen_width)=>{
    $(this).toggleClass('-active');

    //log the screen width at the time the button was clicked
    console.log(screen_width);
  })
})`,
    })

    :markdown
      Alternitavely you can use it in an if statement sort of format.

      Here is the same example again except this time as an if statement.

    +demo({
      html: `
include /_modules/btn/btn
.example
  +btn({classes:'-two'})
    | Clickable above 980px screen width`,
      js: `
//module js file
"use strict";
import $ from 'jquery';

//import the mq variable that was created in the setup stage
import mq from "./mq";

$('.btn.-two').click(function(e){
  e.preventDefault();
  if (mq.min('medium')){
    $(this).toggleClass('-active');
  }
})`,
    })

    :markdown
      Notice that the first example give you access to the screen width at the time the button was clicked. The second example does not (or at least not without custom code)

    :markdown
      ### mq.max

      `mq.max` does pretty much what you expect it to do. It will only run the function if the screen width is bellow the specified breakpoint.

      It also comes in `if` format but for the sake of brevity I'll just show the `callback` format.

    +demo({
      html: `
include /_modules/btn/btn
.example
  +btn({classes:'-three'})
    | Clickable below 980px screen width`,
      js: `
//module js file
"use strict";
import $ from 'jquery';

//import the mq variable that was created in the setup stage
import mq from "./mq";

$('.btn.-three').click(function(e){
  e.preventDefault();
  mq.max('medium', (screen_width)=>{
    $(this).toggleClass('-active');

    //log the screen width at the time the button was clicked
    console.log(screen_width);
  })
})`,
    })

    :markdown
      `mq.max` is **inclusive** of the breakpoint value where as `mq.min` is **exclusive** of the breakpoint value. This serves two important purposes:

      1. It prevents bugs from occuring in that 1px sweet spot where both would return true.

      2. It aligns with how [mq-scss](https://www.npmjs.com/package/mq-scss) handles min and max width to prevent odd bugs where javascript is firing but the styles aren't there to support it (or vice versa).
