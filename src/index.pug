extends _layouts/base

block includes
  include /_modules/pageContainer/pageContainer
  include /_modules/demo/demo
  include /_modules/bodyContent/bodyContent
  include /_modules/header/header

block content
  +pageContainer()
    +header()
    :markdown
      This documentation is best viewed on a Desktop computer or laptop for the sake of viewing the examples at all screen sizes.

      This documentation also assumes that you have the ability to use ES6 JavaScript syntax in your project. Try looking into [Yeogurt](https://github.com/larsonjj/generator-yeogurt) or [Babel](https://babeljs.io/) if you aren't already using ES6 syntax in your JavaScript.

      mq-js was inspired by the [mq-scss](https://www.npmjs.com/package/mq-js) Sass mixin. I wanted to use media queries in javascript in a similar sort of way to how I was using media queries in Sass.

      If you haven't looked into [mq-scss](https://www.npmjs.com/package/mq-js) I highly recommend checking it out. It makes writing media queries far easier than any other method.

    +bodyContent()
      :markdown
        ## Setup

        Firstly, use `npm install mq-js --save` to add the npm module to your project. If you haven't used npm before, read through [this documentation](https://docs.npmjs.com/getting-started/installing-node) to get set up.

        Now, create this simple `mq.js` file to set up your websites breakpoints.

    +demo({
      js: `
//mq.js file
"use strict";

import MQ from "mq-js";

//Define your Site break points here
const mq = new MQ({
  breakpoints: {
    small: 600,
    medium: 980,
    large: 1200
  },
});

export default mq;`,
    })

    p(style="text-align: center; font-size: 2em")
      strong OR

    :markdown
      Alternatively you can save the breakpoints into a JSON file, then import them.

    +demo({
      json: `
{
  "//" : "This is the breakpoints.json file",
  "small": 600,
  "medium": 980,
  "large": 1200
}`,
      js: `
//mq.js file
"use strict";
import MQ from "mq-js";
import breakpoints from './breakpoints.json';

//Using ES6 deconstruction as a short cut
const mq = new MQ({ breakpoints });

export default mq;`,
    })

    :markdown
      The above breakpoints are what I will be using throughout the examples in this documentation.

      Now that you have your break points set up, you can use them when calling the function.

    :markdown
      ## mq.min

      In the following example, the button wil only turn green when you click it if the browser window is a minimum of 981px wide (ie. above the "medium" breakpoint).

      The border will turn green when it is clickable

    +demo({
      html: `
include /_modules/btn/btn
.example
  +btn({classes:'-one'})
    | Clickable at 981px screen width and above`,
      js: `
//module js file
"use strict";
import $ from 'jquery';

//import the mq variable that was created in the setup stage
import mq from "./mq";

$('.btn.-one').click(function(e){
  e.preventDefault();

  mq.min('medium', (screen_width)=>{
    $(this).toggleClass('-active');

    //log the screen width at the time the button was clicked
    console.log(screen_width);
  })
})`,
    })

    :markdown
      You might be wondering why 981px instead of 980px. I will get into it a bit more further down but for now just know that it is primarily to avoid conflicts.

      Alternitavely you can use it in an if statement sort of format.

      Here is the same example again except this time as an if statement.

    +demo({
      html: `
include /_modules/btn/btn
.example
  +btn({classes:'-two'})
    | Clickable above 980px screen width`,
      js: `
//module js file
"use strict";
import $ from 'jquery';

//import the mq variable that was created in the setup stage
import mq from "./mq";

$('.btn.-two').click(function(e){
  e.preventDefault();

  if (mq.min('medium')){
    $(this).toggleClass('-active');
  }
})`,
    })

    :markdown
      Notice that the first example give you access to the screen width at the time the button was clicked. The second example does not (or at least not without custom code)

    :markdown
      ## mq.max

      `mq.max` does pretty much what you expect it to do. It will only run the function if the screen width is bellow the specified breakpoint.

      It also comes in `if` format but for the sake of brevity I'll just show the `callback` format.

    +demo({
      html: `
include /_modules/btn/btn
.example
  +btn({classes:'-three'})
    | Clickable at and below 980px screen width`,
      js: `
//module js file
"use strict";
import $ from 'jquery';

//import the mq variable that was created in the setup stage
import mq from "./mq";

$('.btn.-three').click(function(e){
  e.preventDefault();

  mq.max('medium', (screen_width)=>{
    $(this).toggleClass('-active');

    //log the screen width at the time the button was clicked
    console.log(screen_width);
  })
})`,
    })

    :markdown
      `mq.max` is **inclusive** of the breakpoint value where as `mq.min` is **exclusive** of the breakpoint value. This serves two important purposes:

      1. It prevents bugs from occuring in that 1px sweet spot where both would return true.

      2. It aligns with how [mq-scss](https://www.npmjs.com/package/mq-scss) handles min and max width to prevent odd bugs where javascript is firing but the styles aren't there to support it (or vice versa).

    :markdown
      ## mq.inside

      `mq.inside` works the same way as it does in [mq-scss](https://www.npmjs.com/package/mq-scss).

      You state the larger value first then the smaller value. The function will only be triggered if it is within that range.

      Like everything else, it also comes in `if` format but for the sake of brevity I'm showing only the `callback` format.

      The smaller value is always the value that gets +1 for consistency with the mq-scss mixin.

    +demo({
      html: `
include /_modules/btn/btn
.example
  +btn({classes:'-four'})
    | Clickable at and between 980px and 601px screen width`,
      js: `
//module js file
"use strict";
import $ from 'jquery';

//import the mq variable that was created in the setup stage
import mq from "./mq";

$('.btn.-four').click(function(e){
  e.preventDefault();

  mq.inside('medium', 'small', (screen_width)=>{
    $(this).toggleClass('-active');

    //log the screen width at the time the button was clicked
    console.log(screen_width);
  })
})`,
    })

    :markdown
      ### Smallest value first

      If you have more of smallest-up-to-largest sort of mindset then placing the largest value first might feel counterintuative for you.

      If that is the case then in your `mq.js` setup file, you can set the `largestFirst` setting to `false` to make the first setting be the smaller value.

    +demo({
      js: `
//mq.js file
"use strict";

import MQ from "mq-js";

//Define your Site break points here
const mq = new MQ({
  largestFirst: false,
  breakpoints: {
    small: 600,
    medium: 980,
    large: 1200
  }
});

export default mq;`,
    })

    :markdown
      or if you used the the JSON version...

    +demo({
      json: `
{
  "//" : "This is the breakpoints.json file",
  "small": 600,
  "medium": 980,
  "large": 1200
}`,
      js: `
//mq.js file
"use strict";
import MQ from "mq-js";
import breakpoints from './breakpoints.json';

//Using ES6 deconstruction as a short cut
const mq = new MQ({
  largestFirst: false,
  breakpoints
});

export default mq;`,
    })

    :markdown
      Then you are free to place the smaller value first like this:

    +demo({
      html: `
include /_modules/btn/btn
.example
  +btn({classes:'-five'})
    | Clickable at and between 980px and 601px screen width`,
      js: `
//module js file
"use strict";
import $ from 'jquery';

//import the mq variable that was created in the setup stage
import mq from "./mq";

$('.btn.-five').click(function(e){
  e.preventDefault();

  mq.inside('small', 'medium', (screen_width)=>{
    $(this).toggleClass('-active');

    //log the screen width at the time the button was clicked
    console.log(screen_width);
  })
})`,
    })

    :markdown
      ## mq.outside

      `mq.outside` does what you would expect. It is the opposite of `mq.inside`. It will only fire if the screen width is outside of the two breakpoint values.

    +demo({
      html: `
include /_modules/btn/btn
.example
  +btn({classes:'-six'})
    | Clickable outside of 980px to 601px screen widths`,
      js: `
//module js file
"use strict";
import $ from 'jquery';

//import the mq variable that was created in the setup stage
import mq from "./mq";

$('.btn.-six').click(function(e){
  e.preventDefault();

  mq.outside('medium', 'small', (screen_width)=>{
    $(this).toggleClass('-active');

    //log the screen width at the time the button was clicked
    console.log(screen_width);
  })
})`,
    })

    :markdown
      ## Creating media query variables

      One of the big features in mq-scss is that you can easily create meaningful media query variables.

      Here is how to do a similar thing with mq-js:

    +demo({
      html: `
include /_modules/btn/btn
.example
  +btn({classes:'-seven'})
    | Clickable at and below a 980px screen width`,
      js: `
//module js file
"use strict";
import $ from 'jquery';

//import the mq variable that was created in the setup stage
import mq from "./mq";

const MQ_btn__active = ()=> mq.max('medium');

$('.btn.-seven').click(function(e){
  e.preventDefault();

  if (MQ_btn__active()){
    $(this).toggleClass('-active');
  }

})`,
    })

    :markdown
      ## Using pure pixel values

      Just because you have access to the breakpoint values doesn't mean you have to use them. mq-js still works if you just parse solid numbers into it.

    +demo({
      html: `
include /_modules/btn/btn
.example
  +btn({classes:'-eight'})
    | Clickable at and below 1000px screen width`,
      js: `
//module js file
"use strict";
import $ from 'jquery';

//import the mq variable that was created in the setup stage
import mq from "./mq";

$('.btn.-eight').click(function(e){
  e.preventDefault();

  mq.max(1000, (screen_width)=>{
    $(this).toggleClass('-active');

    //log the screen width at the time the button was clicked
    console.log(screen_width);
  })
})`,
    })

    :markdown
      Remember that if you use `mq.min` it will be like adding 1 pixel to the value you provide

    +demo({
      html: `
include /_modules/btn/btn
.example
  +btn({classes:'-nine'})
    | Clickable at 1001px screen width and above`,
      js: `
//module js file
"use strict";
import $ from 'jquery';

//import the mq variable that was created in the setup stage
import mq from "./mq";

$('.btn.-nine').click(function(e){
  e.preventDefault();

  mq.min(1000, (screen_width)=>{
    $(this).toggleClass('-active');

    //log the screen width at the time the button was clicked
    console.log(screen_width);
  })
})`,
    })
