{"version":3,"sources":["_shared-test.scss","../../node_modules/mq-scss/_mq.scss","test-em.scss","../../tests/height-based/insideHeight/insideHeight.scss","test-em.css","../../tests/height-based/maxHeight/maxHeight.scss","../../tests/height-based/minHeight/minHeight.scss","../../tests/height-based/outsideHeight/outsideHeight.scss","../../tests/orientation/landscape/landscape.scss","../../tests/orientation/portrait/portrait.scss","../../tests/ratio-based/insideRatio/insideRatio.scss","../../tests/ratio-based/maxRatio/maxRatio.scss","../../tests/ratio-based/minRatio/minRatio.scss","../../tests/ratio-based/outsideRatio/outsideRatio.scss","../../tests/ratio-based/ratio/ratio.scss","../../tests/width-based/inside/inside.scss","../../tests/width-based/max/max.scss","../../tests/width-based/min/min.scss","../../tests/width-based/outside/outside.scss"],"names":[],"mappings":"AAQA,KACC,uBAAuB,AACvB,gBAAgB,AAChB,UAAW,CACX,AAED,OACC,YAAa,CACb,ACuZE,sDCjaH,kBFDC,wBAAoC,CGDnC,CCUD,AHyZE,2BCjaH,eFDC,wBAAoC,CKDnC,CDgBD,AHmZE,8BCjaH,eFDC,wBAAoC,CMDnC,CFsBD,AH6YE,mDCjaH,mBFDC,wBAAoC,CODnC,CH4BD,AHuYE,+BCjaH,eFDC,wBAAoC,CQDnC,CJkCD,AHiYE,8BCjaH,cFDC,wBAAoC,CSDnC,CLwCD,AH2XE,yDCjaH,iBFDC,wBAAoC,CUAnC,CN6CD,AHqXE,8BCjaH,cFDC,wBAAoC,CWDnC,CPoDD,AH+WE,8BCjaH,cFDC,wBAAoC,CYDnC,CR0DD,AHyWE,qDCjaH,kBFDC,wBAAoC,CaAnC,CT+DD,AHmWE,0BCjaH,WFDC,wBAAoC,CcDnC,CVsED,AH6VE,oDCjaH,YFDC,wBAAoC,CeDnC,CX4ED,AHuVE,0BCjaH,SFDC,wBAAoC,CgBDnC,CZkFD,AHiVE,6BCjaH,SFDC,wBAAoC,CiBDnC,CbwFD,AH2UE,iDCjaH,aFDC,wBAAoC,CkBDnC,Cd8FD","file":"test-em.css","sourcesContent":["\r\n$bp-large: 600px;\r\n$bp-small: 300px;\r\n\r\n@mixin active() {\r\n\tbackground-color: hsl(120, 35%, 81%);\r\n}\r\n\r\nbody {\r\n\tbackground: transparent;\r\n\toverflow: hidden;\r\n\tcolor: #000;\r\n}\r\n\r\nheader {\r\n\tdisplay: none;\r\n}\r\n","$mediaQuery: ();\r\n\r\n$mq-ems: false !default;\r\n$mq-em-base: 16px !default;\r\n$mq-debug: false !default;\r\n\r\n@import '_functions';\r\n\r\n@function mediaType($mediaType: false, $hasAnd: true){\r\n\t$media: '';\r\n\t$mediaType: if($mediaType == 'not', 'not all', $mediaType);\r\n\t@if ($mediaType){\r\n\t\t$media: if($hasAnd, $mediaType + ' and ', $mediaType);\r\n\t}\r\n\t@return $media;\r\n}\r\n\r\n@function isRatio($string){\r\n\t@if (type-of($string) == 'string' and $string != 'plus'){\r\n\t\t@if (str-index($string, \"/\")){\r\n\t\t\t@return true;\r\n\t\t}\r\n\t}\r\n\t@return false;\r\n}\r\n\r\n@function isMedia($string){\r\n\t@return type-of($string) == 'string' and $string != 'plus' and not isRatio($string);\r\n}\r\n\r\n@function calculateMQ($range, $breakpoint_1: null, $breakpoint_2: null, $mediaType: false, $debug: $mq-debug){\r\n\r\n\t$swap-values: false;\r\n\r\n\t$mediaTypeString: '' + $mediaType + '';\r\n\r\n\t$invalidMediaType:\r\n\t\t($mediaType != false) and (\r\n\t\t\t(type-of($mediaType) == 'number') or\r\n\t\t\t(str-index($mediaTypeString, '/') != null)\r\n\t\t);\r\n\r\n\t@if ($invalidMediaType == true){\r\n\t\t@error '\"'+$mediaType+'\" is not a valid media type';\r\n\t}\r\n\r\n\t@if ($range == null) {\r\n\t\t@return $mediaType;\r\n\t}\r\n\r\n\t@if ($breakpoint_2 != null){\r\n\r\n\t\t@if (isRatio($breakpoint_1)){\r\n\r\n\t\t\t$A1: get-start($breakpoint_1);\r\n\t\t\t$A2: get-end($breakpoint_1);\r\n\r\n\t\t\t$B1: get-start($breakpoint_2);\r\n\t\t\t$B2: get-end($breakpoint_2);\r\n\r\n\t\t\t@if ($debug) {\r\n\t\t\t\t@debug range_numbers \"('A1/A2', 'B1/B2')\" (A1: $A1, A2: $A2, B1: $B1, B2: $B2);\r\n\t\t\t}\r\n\r\n\t\t\t$swap-values: $A1 / $A2 < $B1 / $B2;\r\n\t\t} @else {\r\n\t\t\t$swap-values: $breakpoint_1 < $breakpoint_2;\r\n\t\t}\r\n\r\n\t\t//Swaps the breakpoint_s around\r\n\t\t@if ($swap-values){\r\n\t\t\t$temp: $breakpoint_1;\r\n\t\t\t$breakpoint_1: $breakpoint_2;\r\n\t\t\t$breakpoint_2: $temp;\r\n\t\t}\r\n\r\n\t} @else {\r\n\t\t$breakpoint_2: 0;\r\n\t}\r\n\r\n\t$mediaString: '';\r\n\r\n\t@if ($range == 'orientation'){\r\n\t\t@if ($breakpoint_1 != 'landscape' and $breakpoint_1 != 'portrait'){\r\n\t\t\t@error '\"orientation\" range only accepts the values \"landscape\" and \"portrait\". Currently providing the value \"#{$breakpoint_1}\".';\r\n\t\t}\r\n\t}\r\n\r\n\t@if ($debug){\r\n\t\t@debug calculateMQ (range: $range, breakpoint_1: $breakpoint_1, breakpoint_2: $breakpoint_2, mediaType: $mediaType);\r\n\t}\r\n\r\n\t@if (str-index($range, 'inside') != null or str-index($range, 'outside') != null){\r\n\t\t@if ($breakpoint_2 == 0) {\r\n\t\t\t@error '\"#{$range}\" range requires a second value. Currently only providing \"#{$breakpoint_1}\" as a value.';\r\n\t\t}\r\n\t} @else {\r\n\t\t@if ($breakpoint_2 != 0) {\r\n\t\t\t@error '\"#{$range}\" range can only take one value. Currently providing both \"#{$breakpoint_1}\" and \"#{$breakpoint_2}\" as values.';\r\n\t\t}\r\n\t}\r\n\r\n\t@if (str-index($range, 'ratio') == null){\r\n\t\t//if a standard media query\r\n\t\t@if (type-of($breakpoint_1) != number and $range != 'orientation'){\r\n\t\t\t@if ($breakpoint_2 != 0) {\r\n\t\t\t\t@error '\"#{$range}\" range requires the breakpoint_s (\"#{$breakpoint_1}\" and \"#{$breakpoint_2}\") to be pixel values';\r\n\t\t\t} @else {\r\n\t\t\t\t@error '\"#{$range}\" range requires the breakpoint_ \"#{$breakpoint_1}\" to be a pixel value';\r\n\t\t\t}\r\n\t\t}\r\n\t} @else {\r\n\t\t//else if it's a ratio...\r\n\t\t@if ((($breakpoint_2 != 0) and (type-of($breakpoint_2) != string))){\r\n\t\t\t@error '\"#{$range}\" range requires the breakpoint_s (\"#{$breakpoint_1}\" and \"#{$breakpoint_2}\") to both be strings in this format \"4 / 3\" (width ratio / height ratio).';\r\n\t\t} @else if (type-of($breakpoint_1) != string) {\r\n\t\t\t@error '\"#{$range}\" range requires the breakpoint_ \"#{$breakpoint_1}\" to be a string in this format \"4 / 3\" (width ratio / height ratio).';\r\n\t\t}\r\n\t}\r\n\r\n\t$breakpoint_1_plus: $breakpoint_1 + 1;\r\n\t$breakpoint_2_plus: $breakpoint_2 + 1;\r\n\r\n\t$media: if($mediaType, $mediaType, '');\r\n\r\n\t@if ($mq-ems) {\r\n\t\t$breakpoint_1: _mq-em($breakpoint_1);\r\n\t\t$breakpoint_2: _mq-em($breakpoint_2);\r\n\t\t$breakpoint_1_plus: _mq-em($breakpoint_1_plus);\r\n\t\t$breakpoint_2_plus: _mq-em($breakpoint_2_plus);\r\n\t}\r\n\r\n\t$min-width: '(min-width: #{$breakpoint_1_plus})';\r\n\t$max-width: '(max-width: #{$breakpoint_1})';\r\n\r\n\t$inside-width: '(max-width: #{$breakpoint_1}) and (min-width: #{$breakpoint_2_plus})';\r\n\t$outside-width: '(max-width: #{$breakpoint_2}), '+$media+'(min-width: #{$breakpoint_1_plus})';\r\n\r\n\t$mediaString: map-get((\r\n\t//*1 value given*/\r\n\t\tmin : $min-width,\r\n\t\tmax : $max-width,\r\n\t\r\n\t\tmin-width : $min-width,\r\n\t\tmax-width : $max-width,\r\n\r\n\t\tmin-height : '(min-height: #{$breakpoint_1_plus})',\r\n\t\tmax-height : '(max-height: #{$breakpoint_1})',\r\n\r\n\t\tratio : '(aspect-ratio: #{$breakpoint_1})',\r\n\t\tmin-ratio : '(min-aspect-ratio: #{$breakpoint_1})',\r\n\t\tmax-ratio : '(max-aspect-ratio: #{$breakpoint_1})',\r\n\r\n\t\tdevice-ratio : '(device-aspect-ratio: #{$breakpoint_1})',\r\n\t\tmin-device-ratio : '(min-device-aspect-ratio: #{$breakpoint_1})',\r\n\t\tmax-device-ratio : '(max-device-aspect-ratio: #{$breakpoint_1})',\r\n\r\n\t\torientation : '(orientation: #{$breakpoint_1})',\r\n\r\n\t//*2 values given*/\r\n\t\tinside : $inside-width,\r\n\t\toutside : $outside-width,\r\n\r\n\t\tinside-width : $inside-width,\r\n\t\toutside-width : $outside-width,\r\n\r\n\t\tinside-height : '(max-height: #{$breakpoint_1}) and (min-height: #{$breakpoint_2_plus})',\r\n\t\toutside-height : '(max-height: #{$breakpoint_2}), '+$media+'(min-height: #{$breakpoint_1_plus})',\r\n\t\t\r\n\t\tinside-ratio : '(max-aspect-ratio: #{$breakpoint_1}) and (min-aspect-ratio: #{$breakpoint_2})',\r\n\t\toutside-ratio : '(max-aspect-ratio: #{$breakpoint_2}), '+$media+'(min-aspect-ratio: #{$breakpoint_1})',\r\n\t\t\r\n\t\tinside-device-ratio : '(max-device-aspect-ratio: #{$breakpoint_1}) and (min-device-aspect-ratio: #{$breakpoint_2})',\r\n\t\toutside-device-ratio : '(max-device-aspect-ratio: #{$breakpoint_2}), '+$media+'(min-device-aspect-ratio: #{$breakpoint_1})',\r\n\t), $range);\r\n\r\n\t@return $mediaString;\r\n}\r\n\r\n@function isBasicQuery($range) {\r\n\t$first_is_string: type-of(nth($range,1)) == string;\r\n\t$longer_than_1: length($range) > 1;\r\n\t$not_plus_statment: true;\r\n\t@if ($longer_than_1) {\r\n\t\t$not_plus_statment: nth($range,2) != 'plus';\r\n\t}\r\n\t@return $first_is_string and $longer_than_1 and $not_plus_statment;\r\n}\r\n\r\n@function get_values($mqSet, $debug: $mq-debug){\r\n\r\n\t@if ($mq-debug) {\r\n\t\t@debug mqSet (length: length($mqSet), mqSet: $mqSet);\r\n\t}\r\n\r\n\t$range: nth($mqSet,1);\r\n\t$breakpoint_1: null;\r\n\t$breakpoint_2: null;\r\n\t$media: false;\r\n\r\n\t@if (length($mqSet) == 1){\r\n\t\t$first: nth($mqSet, 1);\r\n\t\t@if (type-of($first) != 'string'){\r\n\t\t\t@error '\"#{$first}\" is not a valid media type';\r\n\t\t}\r\n\t\t$range: null;\r\n\t\t$media: $first;\r\n\t}\r\n\r\n\t@if (length($mqSet) > 1){\r\n\t\t$breakpoint_1: nth($mqSet, 2);\r\n\t}\r\n\r\n\t@if (length($mqSet) == 3){\r\n\t\t$third: nth($mqSet, 3);\r\n\r\n\t\t@if (type-of($third) == 'number' or isRatio($third)){\r\n\t\t\t$breakpoint_2: $third;\r\n\t\t} @else {\r\n\t\t\t$media: $third;\r\n\t\t}\r\n\t}\r\n\r\n\t@if (length($mqSet) == 4){\r\n\t\t$third: nth($mqSet, 3);\r\n\t\t$fourth: nth($mqSet, 4);\r\n\r\n\t\t@if ($fourth == false and isMedia($third)){\r\n\t\t\t$media: $third;\r\n\t\t} @else {\r\n\t\t\t$breakpoint_2: $third;\r\n\t\t\t$media: $fourth;\r\n\t\t}\r\n\r\n\t\t@if ($media == \" and \") {\r\n\t\t\t$media: '';\r\n\t\t}\r\n\t}\r\n\r\n\t$finalValues: (\r\n\t\trange: $range,\r\n\t\tbreakpoint_1: $breakpoint_1,\r\n\t\tbreakpoint_2: $breakpoint_2,\r\n\t\tmedia: mediaType($media, $range != null),\r\n\t);\r\n\r\n\t@if ($debug) {\r\n\t\t@debug get_values_result $finalValues;\r\n\t}\r\n\r\n\t@return $finalValues;\r\n}\r\n\r\n@function get_media($mqSet){\r\n\t@return map-get( get_values($mqSet), media);\r\n}\r\n\r\n@function calculateBasicQuery($mqSet, $isAndStatement: false, $debug: $mq-debug){\r\n\t$values: get_values($mqSet, $debug);\r\n\r\n\t$range: map-get($values, range);\r\n\t$breakpoint_1: map-get($values, breakpoint_1);\r\n\t$breakpoint_2: map-get($values, breakpoint_2);\r\n\t$media: map-get($values, media);\r\n\r\n\t@if ($range == null) {\r\n\t\t//if only a media type is given return nothing because it is added elsewhere\r\n\t\t@return '';\r\n\t}\r\n\r\n\t@if ((str-index($range, 'outside') != null) and $isAndStatement){\r\n\t\t$error: 'All \"outside\" range types are incompatible with \"plus\" statements: (' + $mqSet + ')';\r\n\t\t@error $error;\r\n\t}\r\n\r\n\t@return calculateMQ($range, $breakpoint_1, $breakpoint_2, $media, $debug: $debug);\r\n}\r\n\r\n@function joinQueries($range, $queryString: (), $debug: $mq-debug){\r\n\r\n\t$isAndStatement: false;\r\n\t$contains_media_only_statement: false;\r\n\t$media_statement_at_start: true;\r\n\r\n\t@if (length($range) > 1) {\r\n\t\t@for $i from 1 through length($range) {\r\n\t\t\t$statement: nth($range,$i);\r\n\t\t\t@if ($debug) {\r\n\t\t\t\t@debug joinQueries_statement $statement;\r\n\t\t\t}\r\n\t\t\t$mediaNotFirst: $i != 1 and isMedia($statement);\r\n\t\t\t@if ($statement == 'plus') {\r\n\t\t\t\t$isAndStatement: true;\r\n\t\t\t\t@if ($i == 2 and length(nth($range,1)) == 1) {\r\n\t\t\t\t\t$contains_media_only_statement: true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t@if ($mediaNotFirst){\r\n\t\t\t\t$media_statement_at_start: false;\r\n\t\t\t}\r\n\t\t}\r\n\t} @else if (type-of(nth($range,1)) == 'string') {\r\n\t\t$contains_media_only_statement: true;\r\n\t}\r\n\r\n\t@if ($isAndStatement and not $media_statement_at_start) {\r\n\t\t@error 'Media type definitions must be specified at the start of plus statements: (#{$range)})';\r\n\t}\r\n\r\n\t//Uses this functionality if using a single level MQ variable\r\n\t//eg:\r\n\t//$MQ-example--single: inside, 1000px, 500px;\r\n\t//@include mq($MQ-example--single){}\r\n\t@if (isBasicQuery($range)){\r\n\r\n\t\t@return get_media($range) + calculateBasicQuery($range, $isAndStatement, $debug: $debug);\r\n\r\n\t//Uses this functionality if using a multi level MQ variable\r\n\t//eg:\r\n\t//$MQ-example--multiple:\r\n\t//\t(inside, 1000px, 500px),\r\n\t//\t(min, 1200px)\r\n\t//;\r\n\t//@include mq($MQ-example--multiple){}\r\n\t} @else {\r\n\r\n\t\t@each $mqSet in $range {\r\n\r\n\t\t\t@if ($mqSet != 'plus') {\r\n\t\t\t\t@if (isBasicQuery($mqSet)){\r\n\r\n\t\t\t\t\t$newQuery: calculateBasicQuery($mqSet, $isAndStatement, $debug: $debug);\r\n\r\n\t\t\t\t\t$media: get_media($mqSet);\r\n\r\n\t\t\t\t\t@if ($isAndStatement) {\r\n\t\t\t\t\t\t@if ($queryString == ()){\r\n\t\t\t\t\t\t\t$queryString: $media + $newQuery;\r\n\t\t\t\t\t\t} @else if ($newQuery != '') {\r\n\t\t\t\t\t\t\t$queryString: $queryString + ' and ' + $newQuery;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} @else {\r\n\t\t\t\t\t\t$queryString: append($queryString, $media + $newQuery, 'comma');\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} @else {\r\n\r\n\t\t\t\t\t$is_media_only_statment: $contains_media_only_statement and type-of($mqSet) == 'string';\r\n\r\n\t\t\t\t\t@if ($isAndStatement) {\r\n\t\t\t\t\t\t@if ($is_media_only_statment) {\r\n\t\t\t\t\t\t\t$queryString: mediaType($mqSet, false);\r\n\t\t\t\t\t\t} @else {\r\n\t\t\t\t\t\t\t$queryString: joinQueries($mqSet, $queryString, $debug);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t@if (length($queryString) > 1){\r\n\t\t\t\t\t\t\t$error: 'mq-scss does not support \"or\" statements inside \"plus\" statements: ' + $queryString;\r\n\t\t\t\t\t\t\t@error $error;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} @else {\r\n\t\t\t\t\t\t@if ($is_media_only_statment) {\r\n\t\t\t\t\t\t\t$queryString: $mqSet;\r\n\t\t\t\t\t\t} @else {\r\n\t\t\t\t\t\t\t$queryString: append($queryString, joinQueries($mqSet, $debug: $debug), 'comma');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t@return $queryString;\r\n\t}\r\n}\r\n\r\n@mixin mq($range, $breakpoint_1: null, $breakpoint_2: null, $mediaType: false, $debug: $mq-debug) {\r\n\r\n\t@if ($debug) {\r\n\t\t@debug $range;\r\n\t}\r\n\r\n\t@if (length($range) > 1) {\r\n\t\t$finalOutput: joinQueries($range, $debug: $debug);\r\n\t\t@if ($debug) {\r\n\t\t\t@debug '!!!!! FINAL OUTPUT: @media ' + $finalOutput;\r\n\t\t}\r\n\t\t@media #{$finalOutput} {\r\n\t\t\t@content;\r\n\t\t}\r\n\r\n\t//Uses this functionality if placing MQ data inline\r\n\t//eg:\r\n\t//@include mq(inside, 1000px, 500px, 'screen');\r\n\t} @else {\r\n\t\t//standardises the values to prevent mediaType from getting confused with breakpoint_2\r\n\t\t$mediaOnly: $breakpoint_1 == null and $breakpoint_2 == null and $mediaType == false;\r\n\t\t@if ($debug) {\r\n\t\t\t@debug inline_mq_values (range: $range, breakpoint_1: $breakpoint_1, breakpoint_2: $breakpoint_2, mediaType: $mediaType, mediaOnly: $mediaOnly);\r\n\t\t}\r\n\t\t$values: get_values(if($mediaOnly, $range, ($range $breakpoint_1 $breakpoint_2 $mediaType)), $debug: $debug);\r\n\r\n\t\t$newRange: map-get($values, range);\r\n\t\t$newWidth1: map-get($values, breakpoint_1);\r\n\t\t$newWidth2: map-get($values, breakpoint_2);\r\n\t\t$newMedia: map-get($values, media);\r\n\r\n\t\t@if ($mediaOnly) {\r\n\r\n\t\t\t@if ($debug) {\r\n\t\t\t\t@debug '!!!!! FINAL OUTPUT: @media ' + $newMedia;\r\n\t\t\t}\r\n\r\n\t\t\t@media #{ $newMedia } {\r\n\t\t\t\t@content;\r\n\t\t\t}\r\n\r\n\t\t} @else {\r\n\r\n\t\t\t$finalMQ: $newMedia + calculateMQ($newRange, $newWidth1, $newWidth2, $debug: $debug);\r\n\r\n\t\t\t@if ($debug) {\r\n\t\t\t\t@debug '!!!!! FINAL OUTPUT: @media ' + $finalMQ ;\r\n\t\t\t}\r\n\r\n\t\t\t@media #{ $finalMQ } {\r\n\t\t\t\t@content;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t@if ($debug){\r\n\t\t//spacer for seperating results\r\n\t\t@debug '';\r\n\t}\r\n\r\n}\r\n\r\n@mixin retina($density: 2) {\r\n\t\t@media\r\n\t\tonly screen and (min-device-pixel-ratio: $density),\r\n\t\tonly screen and (min-resolution: $density * 96ppi),\r\n\t\tonly screen and (min-resolution: $density * 1dppx) {\r\n\t\t\t@content;\r\n\t}\r\n}\r\n","//mq-scss\r\n$mq-ems: true;\r\n@import 'mq-scss/mq';\r\n\r\n@import './_shared-test.scss';\r\n\r\nhtml {\r\n\t\n@import \"C:/Users/Administrator/C Projects/C-npm/mq-js/tests/height-based/insideHeight/insideHeight.scss\";\n@import \"C:/Users/Administrator/C Projects/C-npm/mq-js/tests/height-based/maxHeight/maxHeight.scss\";\n@import \"C:/Users/Administrator/C Projects/C-npm/mq-js/tests/height-based/minHeight/minHeight.scss\";\n@import \"C:/Users/Administrator/C Projects/C-npm/mq-js/tests/height-based/outsideHeight/outsideHeight.scss\";\n@import \"C:/Users/Administrator/C Projects/C-npm/mq-js/tests/orientation/landscape/landscape.scss\";\n@import \"C:/Users/Administrator/C Projects/C-npm/mq-js/tests/orientation/portrait/portrait.scss\";\n@import \"C:/Users/Administrator/C Projects/C-npm/mq-js/tests/ratio-based/insideRatio/insideRatio.scss\";\n@import \"C:/Users/Administrator/C Projects/C-npm/mq-js/tests/ratio-based/maxRatio/maxRatio.scss\";\n@import \"C:/Users/Administrator/C Projects/C-npm/mq-js/tests/ratio-based/minRatio/minRatio.scss\";\n@import \"C:/Users/Administrator/C Projects/C-npm/mq-js/tests/ratio-based/outsideRatio/outsideRatio.scss\";\n@import \"C:/Users/Administrator/C Projects/C-npm/mq-js/tests/ratio-based/ratio/ratio.scss\";\n@import \"C:/Users/Administrator/C Projects/C-npm/mq-js/tests/width-based/inside/inside.scss\";\n@import \"C:/Users/Administrator/C Projects/C-npm/mq-js/tests/width-based/max/max.scss\";\n@import \"C:/Users/Administrator/C Projects/C-npm/mq-js/tests/width-based/min/min.scss\";\n@import \"C:/Users/Administrator/C Projects/C-npm/mq-js/tests/width-based/outside/outside.scss\";\r\n}\r\n","\r\n@include mq(inside-height, $bp-small, $bp-large) {\r\n\t&.insideHeight {\r\n\t\t@include active();\r\n\t}\r\n}\r\n","body {\n  background: transparent;\n  overflow: hidden;\n  color: #000;\n}\n\nheader {\n  display: none;\n}\n\n@media (max-height: 37.5em) and (min-height: 18.8125em) {\n  html.insideHeight {\n    background-color: #bee0be;\n  }\n}\n\n@media (max-height: 37.5em) {\n  html.maxHeight {\n    background-color: #bee0be;\n  }\n}\n\n@media (min-height: 37.5625em) {\n  html.minHeight {\n    background-color: #bee0be;\n  }\n}\n\n@media (max-height: 18.75em), (min-height: 37.5625em) {\n  html.outsideHeight {\n    background-color: #bee0be;\n  }\n}\n\n@media (orientation: landscape) {\n  html.landscape {\n    background-color: #bee0be;\n  }\n}\n\n@media (orientation: portrait) {\n  html.portrait {\n    background-color: #bee0be;\n  }\n}\n\n@media (max-aspect-ratio: 1 / 1) and (min-aspect-ratio: 1 / 2) {\n  html.insideRatio {\n    background-color: #bee0be;\n  }\n}\n\n@media (max-aspect-ratio: 1 / 2) {\n  html.maxRatio {\n    background-color: #bee0be;\n  }\n}\n\n@media (min-aspect-ratio: 1 / 2) {\n  html.minRatio {\n    background-color: #bee0be;\n  }\n}\n\n@media (max-aspect-ratio: 1 / 2), (min-aspect-ratio: 1 / 1) {\n  html.outsideRatio {\n    background-color: #bee0be;\n  }\n}\n\n@media (aspect-ratio: 1 / 2) {\n  html.ratio {\n    background-color: #bee0be;\n  }\n}\n\n@media (max-width: 37.5em) and (min-width: 18.8125em) {\n  html.inside {\n    background-color: #bee0be;\n  }\n}\n\n@media (max-width: 37.5em) {\n  html.max {\n    background-color: #bee0be;\n  }\n}\n\n@media (min-width: 37.5625em) {\n  html.min {\n    background-color: #bee0be;\n  }\n}\n\n@media (max-width: 18.75em), (min-width: 37.5625em) {\n  html.outside {\n    background-color: #bee0be;\n  }\n}\n","\r\n@include mq(max-height, $bp-large) {\r\n\t&.maxHeight {\r\n\t\t@include active();\r\n\t}\r\n}\r\n","\r\n@include mq(min-height, $bp-large) {\r\n\t&.minHeight {\r\n\t\t@include active();\r\n\t}\r\n}\r\n","\r\n@include mq(outside-height, $bp-small, $bp-large) {\r\n\t&.outsideHeight {\r\n\t\t@include active();\r\n\t}\r\n}\r\n","\r\n@include mq(orientation, 'landscape') {\r\n\t&.landscape {\r\n\t\t@include active();\r\n\t}\r\n}\r\n","\r\n@include mq(orientation, 'portrait') {\r\n\t&.portrait {\r\n\t\t@include active();\r\n\t}\r\n}\r\n","\r\n// TO DO: Bug in mq-scss that will not accept ' 1 / 1 ' here\r\n@include mq(inside-ratio, '1 / 1', '1/2') {\r\n\t&.insideRatio {\r\n\t\t@include active();\r\n\t}\r\n}\r\n","\r\n@include mq(max-ratio, ' 1 / 2 ') {\r\n\t&.maxRatio {\r\n\t\t@include active();\r\n\t}\r\n}\r\n","\r\n@include mq(min-ratio, ' 1 / 2 ') {\r\n\t&.minRatio {\r\n\t\t@include active();\r\n\t}\r\n}\r\n","\r\n// TO DO: Bug in mq-scss that will not accept ' 1 / 1 ' here\r\n@include mq(outside-ratio, '1 / 1', '1/2') {\r\n\t&.outsideRatio {\r\n\t\t@include active();\r\n\t}\r\n}\r\n","\r\n@include mq(ratio, ' 1 / 2 ') {\r\n\t&.ratio {\r\n\t\t@include active();\r\n\t}\r\n}\r\n","\r\n@include mq(inside, $bp-small, $bp-large) {\r\n\t&.inside {\r\n\t\t@include active();\r\n\t}\r\n}\r\n","\r\n@include mq(max, $bp-large) {\r\n\t&.max {\r\n\t\t@include active();\r\n\t}\r\n}\r\n","\r\n@include mq(min, $bp-large) {\r\n\t&.min {\r\n\t\t@include active();\r\n\t}\r\n}\r\n","\r\n@include mq(outside, $bp-small, $bp-large) {\r\n\t&.outside {\r\n\t\t@include active();\r\n\t}\r\n}\r\n"]}